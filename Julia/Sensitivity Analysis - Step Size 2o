using Plots,ForwardDiff

function func(X,A) 
        x,y = X
        return [y,-x]
    end

steps = 100
MaxT = 10 #Maximum time 
x_0 = [1.,1.] #Initial Conditions
A = [steps] #Value of constant
h = MaxT/steps

#Application of Classical Runge-Kutta method
function RK4(f,steps,x_0,MaxT)  
    h = MaxT/steps
    X = []
    push!(X,x_0)
    i = 1
    while i <= steps
        k1 = f(X[i])
        k2 = f(X[i] .+ (0.5.*h.*k1))
        k3 = f(X[i] .+ (0.5.*h.*k2))
        k4 = f(X[i] .+ (h*k3))
        push!(X,X[i]+h*(k1+2 *k2+2 *k3+k4)/6)
        i += 1
    end
    
    return [x[1] for x in X],[x[2] for x in X]
end

#Creation of f'(a)
function ode(A)
    steps = A[1]
    f(x) = func(x,A)
    X = RK4(f,steps,x_0,MaxT)
    return append!(X[1],X[2])
end

function Euler(f,steps,x_0,MaxT)  
    h = MaxT/steps
    X = []
    push!(X,x_0)
    i = 1
    while i <= steps
        push!(X,X[i]+h*(f(X[i])))
        i += 1
    end
    
    return [x[1] for x in X],[x[2] for x in X]
end

#Creation of f'(a)
function odeE(A)
    steps = A[1]
    f(x) = func(x,A)
    X = Euler(f,steps,x_0,MaxT)
    return append!(X[1],X[2])
end


Sol = ode(A)
Solx = Sol[1:steps+1]
Soly = Sol[steps+2:2*steps+2]

Sol = odeE(A)
SolEx = Sol[1:steps+1]
SolEy = Sol[steps+2:2*steps+2]

Der = ForwardDiff.jacobian(ode,A)

Derx = Der[1:steps+1]
Dery = Der[steps+2:2*steps+2]

DerE = ForwardDiff.jacobian(odeE,A)

DerEx = DerE[1:steps+1]
DerEy = DerE[steps+2:2*steps+2]



t = [x*h for x in 1:steps+1]
println(length(t),length(Der1),length(Der2))

p1 = plot([Solx,SolEx],[Soly,SolEy], 
    title = "Solution",
    ylabel = "f2(a)",
    xlabel = "f1(a)",
    zlabel = "t")

p2 = plot([Derx,DerEx],[Dery,DerEy],
    title = "Derivative",
    ylabel = "f '(a)",
    xlabel = "t")

plot(p1,p2,layout = (1, 2),legend = false)



